type beerTap
  @model 
  @auth(rules: [
    { allow: owner, operations: [create, delete, update]},
    { allow: private, provider: iam, operations: [create, delete, read, update] },
    { allow: private, operations: [read]}
  ])
  @key(name: "byTapID", fields:["beerNodeID", "name"])
  @key(name: "byTapIdByIndex", fields:["beerNodeID", "tapIndex"])
{
  id: ID!
  beerNodeID: ID!
  name: String!
  tapIndex: Int!
  maxCapacity: Int
  currentCapacity: Int
  ticksPerLiter: Int
  currentBeerID: ID!
  currentBeer: beerDefinition @connection(fields: ["currentBeerID"])
  node: beerNode @connection(fields: ["beerNodeID"])
}

type beerNode
  @model
  @auth(rules: [
    { allow: owner, operations: [create, delete, update], ownerField:"ownerUsername" },
    { allow: private, provider: iam, operations: [create, delete, read, update] },
    { allow: private, operations: [read]}
  ])

  @key(name: "byDeviceId", fields:["deviceId"], queryField: "NodesByDeviceId")
{
  id: ID!
  ownerUsername: String
  taps: [beerTap] @connection(keyName:"byTapIdByIndex", fields:["id"])
  deviceId: String!
  deviceCommonName: String!
}

type beerDefinition
  @model
  @auth(rules: [
    { allow: owner, operations: [create, delete, update] },
    { allow: private, provider: iam, operations: [create, delete, read, update] },
    { allow: private, operations: [read]}
  ])
{
  id: ID!
  title: String
  description: String
  imageURL: String
  style: String
  brewer: String
  website: String
  abv: Float
  ibu: Int
}

type beerCategory
  @model
{
  id: ID!
  style: String!
}

type beerBrewer
  @model
{
  id: ID!
  brewer: String!
}

type beerDrinker
  @model
  @auth(rules: [
    { allow: owner, operations: [create, delete, update] },
    { allow: private, provider: iam, operations: [create, delete, read, update] },
    { allow: private, operations: [read]}
  ])
{
  id: ID!
  username: String!
  beersConsumed: [beerDefinition]
} 